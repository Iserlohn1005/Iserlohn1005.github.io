<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miaomiao</title>
  
  <subtitle>Give me five :D</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-07T22:07:41.686Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Miaomiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>时间线</title>
    <link href="http://yoursite.com/2118/05/25/%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
    <id>http://yoursite.com/2118/05/25/时间线/</id>
    <published>2118-05-25T22:55:18.000Z</published>
    <updated>2018-07-07T22:07:41.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h1><h2 id="2018-05-25"><a href="#2018-05-25" class="headerlink" title="2018.05.25"></a>2018.05.25</h2><p>用GitHub搭了一个<a href="https://miaomiao1005.github.io/2018/05/25/Build%20Your%20Own%20Blog%20with%20Github%20Pages/" target="_blank" rel="noopener">博客</a></p><h2 id="2018-05-25-1"><a href="#2018-05-25-1" class="headerlink" title="2018.05.25"></a>2018.05.25</h2><p><a href="https://miaomiao1005.github.io/2018/05/29/DVAR-arm/" target="_blank" rel="noopener">DVAR: 路由器</a></p><h2 id="2018-05-31"><a href="#2018-05-31" class="headerlink" title="2018.05.31"></a>2018.05.31</h2><p><a href="https://miaomiao1005.github.io/2018/05/31/Using-Github-as-image-host/" target="_blank" rel="noopener">用Github做图床</a></p><h2 id="2018-07-07"><a href="#2018-07-07" class="headerlink" title="2018.07.07"></a>2018.07.07</h2><p>终于搬完家可以开心的学习了~ 5月份曾经试着用qemu跑Raspberry Pi，但是失败了，现在有时间好好研究了一下，终于装好啦</p><p><a href="https://miaomiao1005.github.io/2018/07/07/Emulate-Raspberry-Pi-with-Qemu-in-Ubuntu/" target="_blank" rel="noopener">用Qemu模拟Raspberry Pi</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2018&quot;&gt;&lt;a href=&quot;#2018&quot; class=&quot;headerlink&quot; title=&quot;2018&quot;&gt;&lt;/a&gt;2018&lt;/h1&gt;&lt;h2 id=&quot;2018-05-25&quot;&gt;&lt;a href=&quot;#2018-05-25&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="时间线" scheme="http://yoursite.com/categories/%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
    
    
      <category term="汇总" scheme="http://yoursite.com/tags/%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>Emulate Raspberry Pi with Qemu in Ubuntu</title>
    <link href="http://yoursite.com/2018/07/07/Emulate-Raspberry-Pi-with-Qemu-in-Ubuntu/"/>
    <id>http://yoursite.com/2018/07/07/Emulate-Raspberry-Pi-with-Qemu-in-Ubuntu/</id>
    <published>2018-07-07T21:58:19.000Z</published>
    <updated>2018-07-07T22:29:34.466Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="用Qemu模拟树莓派"><a href="#用Qemu模拟树莓派" class="headerlink" title="用Qemu模拟树莓派"></a>用Qemu模拟树莓派</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在虚拟机里安装好Ubuntu（这里我装的是16.04），注意最好把硬盘设置的大一点，因为所有快照都占用硬盘的位置，而且硬盘还不能后期扩展..</p><p>下载Raspbian image <a href="http://downloads.raspberrypi.org/raspbian/images/，这里我选用的是raspbian-2017-12-01（试过0410，不知道为什么跑不起来）" target="_blank" rel="noopener">http://downloads.raspberrypi.org/raspbian/images/，这里我选用的是raspbian-2017-12-01（试过0410，不知道为什么跑不起来）</a></p><p>下载kernel  <a href="https://github.com/dhruvvyas90/qemu-rpi-kernel" target="_blank" rel="noopener">https://github.com/dhruvvyas90/qemu-rpi-kernel</a> </p><p>在Ubuntu里面，终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/qemu_vms/</span><br></pre></td></tr></table></figure><p>然后把解压的.img文件和kernel解压后的内容全部复制到这个文件夹内。然后在这个文件夹里右击，选择终端，然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-system</span><br><span class="line">fdisk -l &lt;image-file&gt;</span><br></pre></td></tr></table></figure><p>第二步后能看到 img1和img2文件 start的位置，用这个数字乘以512（假设是x）。然后继续在终端输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /mnt/raspbian</span><br><span class="line">sudo mount -v -o offset=x -t ext4 ~/qemu_vms/&lt;your-img-file.img&gt; /mnt/raspbian</span><br><span class="line">sudo nano /mnt/raspbian/etc/ld.so.preload</span><br></pre></td></tr></table></figure><p>在显示的文本中，把每一行都用#注释掉，然后Ctrl+x退出，选择Y（也就是yes）。然后继续输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /mnt/raspbian/etc/fstab</span><br></pre></td></tr></table></figure><p>如果在打开的文本中看到任何有关mmcblk0，就把第一行的 /dev/mmcblk0p1 改成 /dev/sda1 ，第二行的/dev/mmcblk0p2 改成/dev/sda2，并保存退出。然后输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">sudo umount /mnt/raspbian</span><br></pre></td></tr></table></figure><p>现在可以使用了（如果终端是在qemu_vms文件夹里，就不需要输入kernel和img文件前面的~/qemu_vms)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-arm -kernel ~/qemu_vms/&lt;your-kernel-qemu&gt; -cpu arm1176 -m 256 -M versatilepb -serial stdio -append &quot;root=/dev/sda2 rootfstype=ext4 rw&quot; -hda ~/qemu_vms/&lt;your-jessie-image.img&gt; -redir tcp:5022::22 -no-reboot</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>image文件太小了，所以需要扩展一下~</p><p>先进入qemu_vms的终端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp &lt;your-raspbian-jessie&gt;.img rasbian.img</span><br><span class="line">qemu-img resize raspbian.img +6G</span><br></pre></td></tr></table></figure><p>然后用原始的raspbian加上作为第二硬盘的扩展的img，运行qemu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-arm -kernel ~/qemu_vms/&lt;kernel-qemu&gt; -cpu arm1176 -m 256 -M versatilepb -serial stdio -append &quot;root=/dev/sda2 rootfstype=ext4 rw&quot; -hda ~/qemu_vms/&lt;your-original-raspbian-jessie&gt;.img -redir tcp:5022::22 -no-reboot -hdb raspbian.img</span><br></pre></td></tr></table></figure><p>进入qemu的终端，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cfdisk /dev/sdb</span><br></pre></td></tr></table></figure><p>这时打开了一个文本文件，删掉第二个（sdb2），然后new一个新的（用所有的容量），之后用write保存，最后quit。然后就可以resize并关闭：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo resize2fs /dev/sdb2</span><br><span class="line">sudo fsck -f /dev/sdb2</span><br><span class="line">sudo halt</span><br></pre></td></tr></table></figure><p>现在可以用扩展的img打开qemu了，原来的那个可以删除掉~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-arm -kernel ~/qemu_vms/&lt;kernel-qemu&gt; -cpu arm1176 -m 256 -M versatilepb -serial stdio -append &quot;root=/dev/sda2 rootfstype=ext4 rw&quot; -hda ~/qemu_vms/raspbian.img -redir tcp:5022::22</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://azeria-labs.com/emulate-raspberry-pi-with-qemu/" target="_blank" rel="noopener">RASPBERRY PI ON QEMU</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;用Qemu模拟树莓派&quot;&gt;&lt;a href=&quot;#用Qemu模拟树莓派&quot; class=&quot;headerlink&quot; title=&quot;用Qemu模拟树莓派&quot;&gt;&lt;/a&gt;用Qemu模拟树莓派&lt;/h1&gt;&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; cl
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="RPi" scheme="http://yoursite.com/tags/RPi/"/>
    
      <category term="Qemu" scheme="http://yoursite.com/tags/Qemu/"/>
    
      <category term="树莓派" scheme="http://yoursite.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>Use Github as an Image Host Website</title>
    <link href="http://yoursite.com/2018/05/31/Using-Github-as-image-host/"/>
    <id>http://yoursite.com/2018/05/31/Using-Github-as-image-host/</id>
    <published>2018-05-31T18:46:08.000Z</published>
    <updated>2018-05-31T23:17:46.223Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>Sakura师傅推荐我用七牛，听话的我就注册了七牛~ 但是发现要用全部功能要实名认证?  一个传图的网站需要实名制，莫不是疯了..  不喜欢这种感觉，遂找了其他的图床网站。本想用Google来着，怕被屏蔽了，还是用Github吧。</p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h1><p>在Github里面New repository，然后Clone到一个文件夹里，再推送到Github上，图片的链接中的blog改成raw，就可以了。</p><p>真是敲简单~</p><p>_(:3 」∠)_这么简单..我写这篇的意义何在..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;Sakura师傅推荐我用七牛，听话的我就注册了七牛~ 但是发现要用全部功能要实名认证?  一个
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>DVAR：路由器靶场，实战</title>
    <link href="http://yoursite.com/2018/05/29/DVAR-arm/"/>
    <id>http://yoursite.com/2018/05/29/DVAR-arm/</id>
    <published>2018-05-30T02:44:43.000Z</published>
    <updated>2018-07-05T03:13:35.292Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>这篇写的是对<a href="http://blog.exploitlab.net/2018/01/dvar-damn-vulnerable-arm-router.html" target="_blank" rel="noopener">DVAR: 路由器靶场</a>的研究。</p><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p>一开始能打开虚拟机说的网址，但是后来就打不开了。摸不着头脑…</p><p>查看了很多资料，众说纷纭：</p><ol><li><p>要ifconfig和在主机上ipconfig查看双方地址</p><p>虚拟机要用户名和密码才能输入命令，找了很久终于在另一个页面上找到了密码，然后发现似乎只要输入root就行了…</p><p>好，终于进去了，但config了很久，还是不行。</p><p>​    </p></li><li><p>NAT, Bridge, Host-only</p><p>有人说，主机连不上虚拟机是因为网络适配器没有设置好。遂研究了很久网络适配器。</p><p>这三者主要的区别在于：</p><p>NAT网络地址转换: </p><ul><li>使用网络地址转换功能，通过主机网络访问公网</li><li>虚拟机TCP/IP配置信息是由VMnet8(NAT)虚拟网络的DHCP服务器提供，无法修改，虚拟机无法与局域网里面的其他真实主机通信</li><li>很简单就能访问互联网（只要主机能上网）</li></ul><p>Bridged桥接：</p><ul><li>虚拟机类似于局域网中的一个独立主机，可以访问网内任何一台机器</li><li>需要手动配置IP地址，子网掩码，注意要和主机在同一个网段</li><li>可以手工配置TCP/IP信息，这样可以通过局域网的网关或路由器访问互联网</li></ul><p>Host-Only主机：</p><ul><li>所有虚拟机之间、虚拟机和主机可以通信，但虚拟机和互联网是隔开的</li><li>TCP/IP配置（IP地址，网关地址，DNS服务器）都是由VMnet1(host-only)虚拟网络的DHCP服务器来动态分配</li></ul><p>把虚拟机改成了Bridged模式，但是这次虚拟机在打开的时候就卡住了，一直在waiting for IP address…</p><p>无奈之下还是换回来了NAT模式</p><p>疑惑：按理说NAT模式主机不能访问虚拟机的呀，为什么这个能访问？而且虚拟机里面ifconfig之后，出现的地址是192.168.100.254，跟虚拟机直接给出的地址192.168.220.128不一样，主机ipconfig出现的VMnet8是192.168.220.1，只有访问虚拟机直接给出的地址才会出现路由器页面</p></li></ol><p>   ​    </p><ol start="3"><li><p>还原</p><p>继续看资料。有人说要还原虚拟网络编辑器，遂：编辑-虚拟网络编辑器-还原。</p><p>这样之后，问题就解决了，主机能连上虚拟机提供的IP了呢…_(:3 」∠)_</p><p>感觉还是有点莫名其妙…问题出的莫名其妙，修好也是莫名其妙的说..</p><p>​        </p></li></ol><p>好！现在终于能连上虚拟机，可以开始挖掘了(*￣︶￣)y </p><p>​            </p><p>​        </p><h1 id="2-挖掘"><a href="#2-挖掘" class="headerlink" title="2. 挖掘"></a>2. 挖掘</h1><h2 id="思路1：在路由器web页面寻找可疑的地方"><a href="#思路1：在路由器web页面寻找可疑的地方" class="headerlink" title="思路1：在路由器web页面寻找可疑的地方"></a>思路1：在路由器web页面寻找可疑的地方</h2><p>结果：修改之后回车没反应，save的话就会页面无法访问。似乎这个思路不太对呢…</p><p>​        </p><h2 id="思路2：给路由器发送HTTP-request，然后找漏洞"><a href="#思路2：给路由器发送HTTP-request，然后找漏洞" class="headerlink" title="思路2：给路由器发送HTTP request，然后找漏洞"></a>思路2：给路由器发送HTTP request，然后找漏洞</h2><p>在DVAR的hints里面说第一步要Identify the vulnerable HTTP request</p><p>在<a href="https://paper.seebug.org/269/" target="_blank" rel="noopener">实战栈溢出：三个漏洞搞定一台路由器</a>中说，入侵路由有两步，第一个接入路由器局域网LAN，然后利用路由器自身漏洞来取得权限。路由器漏洞存在于自己的软件中，比如有个开启在80端口的web管理页面，分配IP地址的服务DHCP，即插即用的服务UPnP，这些服务会监听在某个TCP/UDP端口，可以通过向这些端口发送特定数据包来实施攻击（比如权限绕过，命令注入，内存破坏）</p><p>师傅也跟我说以后路由器挖掘都是看到一个页面后进行挖掘</p><p>所以，这个思路应该是比较正确的呢。现在问题是，怎么给路由器发HTTP request？这个感觉还好解决一点，那什么request是vulnerable的呢..</p><p>首先解决给路由器发送HTTP request的问题。</p><p>​        </p><h2 id="思路3：在虚拟机里提取程序，逆向"><a href="#思路3：在虚拟机里提取程序，逆向" class="headerlink" title="思路3：在虚拟机里提取程序，逆向"></a>思路3：在虚拟机里提取程序，逆向</h2><p>​        </p><h2 id="思路4：在路由器页面想办法把程序弄下来，逆向"><a href="#思路4：在路由器页面想办法把程序弄下来，逆向" class="headerlink" title="思路4：在路由器页面想办法把程序弄下来，逆向"></a>思路4：在路由器页面想办法把程序弄下来，逆向</h2><p>​        </p><h2 id="思路5：直接逆向虚拟机程序"><a href="#思路5：直接逆向虚拟机程序" class="headerlink" title="思路5：直接逆向虚拟机程序"></a>思路5：直接逆向虚拟机程序</h2><p>直接拖虚拟机程序到IDA，IDA说这是二进制文件，师傅也说挖掘漏洞跟二进制有关~ 所以感觉这个思路也是很对的呢… </p><p>话说这就是传说中的二进制安全吧！【敲激动！</p><p>首先拖了个r00ter.vmdk，没什么内容，然后拖了r00ter-s001.vmdx，内容好多，而且在Hex-View里面还看到了很多代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">seg000:0050D000                 db  3Ch ; &lt;</span><br><span class="line">seg000:0050D001                 db  3Fh ; ?</span><br><span class="line">seg000:0050D002 aIfExistRuntime db 0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/flashspeed&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$flashspeed = get(&quot;&quot;, &quot;/runtime/devdata/flashspeed&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/flashspeed&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/flashspeed&quot;, $flashspeed);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/pin&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$pin = get(&quot;&quot;, &quot;/runtime/devdata/pin&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/pin&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/pin&quot;, $pin);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/psk&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$psk = get(&quot;&quot;, &quot;/runtime/devdata/psk&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/psk&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/psk&quot;, $psk);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/hwver&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$hwver = get(&quot;&quot;, &quot;/runtime/devdata/hwver&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/hwver&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/hwver&quot;, $hwver);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/countrycode&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$countrycode = get(&quot;&quot;, &quot;/runtime/devdata/countrycode&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/countrycode&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/countrycode&quot;, $countrycode);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/wanmac&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$wanmac = get(&quot;&quot;, &quot;/runtime/devdata/wanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/wanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/wanmac&quot;, $wanmac);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/lanmac&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$lanmac = get(&quot;&quot;, &quot;/runtime/devdata/lanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/lanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/lanmac&quot;, $lanmac);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/wlanmac&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$wlanmac = get(&quot;&quot;, &quot;/runtime/devdata/wlanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/wlanmac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/wlanmac&quot;, $wlanmac);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/wlan5mac&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$wlan5mac = get(&quot;&quot;, &quot;/runtime/devdata/wlan5mac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/wlan5mac&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/wlan5mac&quot;, $wlan5mac);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/wlanmac2&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$wlanmac2 = get(&quot;&quot;, &quot;/runtime/devdata/wlanmac2&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/wlanmac2&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/wlanmac2&quot;, $wlanmac2);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/lanpack&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$lanpack = get(&quot;&quot;, &quot;/runtime/devdata/lanpack&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/lanpack&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/lanpack&quot;, $lanpack);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;if(exist(&quot;/runtime/devdata/mfcmode&quot;)==1)&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#123;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;$mfcmode = get(&quot;&quot;, &quot;/runtime/devdata/mfcmode&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;del(&quot;/runtime/devdata/mfcmode&quot;);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db 9,&apos;set(&quot;/runtime/devdata/mfcmode&quot;, $mfcmode);&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;&#125;&apos;,0Ah</span><br><span class="line">seg000:0050D002                 db &apos;?&gt;&apos;,0Ah,0</span><br></pre></td></tr></table></figure><p>后面还有好几百行.._(:3 」∠)_太多了…或者我还是先试试F5吧…</p><p>嗷，F5不管用…先回到思路2吧..</p><p>【师傅说这个思路是在开玩笑..思路5，再见】</p><h2 id="思路6：直接在虚拟机里找"><a href="#思路6：直接在虚拟机里找" class="headerlink" title="思路6：直接在虚拟机里找"></a>思路6：直接在虚拟机里找</h2><p>在群里问了智障问题之后，大佬回答说：</p><p>人家给了个虚拟机镜像，这个镜像就是这个路由器，只是用虚拟机把他跑起来了而已 ，模拟的物理环境罢了 ，如果放到真实环境上，这就是固件 。跟代码审计、漏洞复现、web上找洞是一样的。有源码。就用源码调试，<br>没有源码。就逆向动态调试。打log什么的。这..大概的意思就是直接在虚拟机里，用binwalk解包，然后用工具逆向？</p><p>理解：所以说，虚拟机里跑起来的就是个Linux的系统，然后开机启动直接就运行了路由器程序。</p><h3 id="问题1：怎么在虚拟机里找到固件的镜像呢？"><a href="#问题1：怎么在虚拟机里找到固件的镜像呢？" class="headerlink" title="问题1：怎么在虚拟机里找到固件的镜像呢？"></a>问题1：怎么在虚拟机里找到固件的镜像呢？</h3><p>直接在login的地方root，然后输入 find，出来了两个文件：</p><p><img src="https://github.com/Miaomiao1005/Image/raw/master/DVAR/1.png" alt="dvar1"></p><p>看样子.gdbinit就是用来分析的软件了</p><p>用vi README.TXT打开txt文件，看了看简介</p><p>输入 ./.gdbinit，说perimission denied。网上说如果没有权限的话，就输入 chmod +x filename, 但是输入之后没有反应</p><h1 id="3-学习"><a href="#3-学习" class="headerlink" title="3. 学习"></a>3. 学习</h1><p>现在还是摸不着头脑.. DVAR的作者说不会的话就去看azeria labs的教程，所以我先看一下教程</p><p>##3.1 ARM Assembly Basics</p><p>###Part 1: 简介</p><p><img src="https://azeria-labs.com/wp-content/uploads/2017/03/gif-assembly-to-machine-code.gif" alt="img2"></p><p>ARM汇编中， GNU BInutils提供了一个工具，叫as，用来把汇编语言转换成机器语言。这种程序是以.s结尾，比如写了一个program.s，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ as program.s -o program.o</span><br><span class="line">$ ld program.o -o program</span><br></pre></td></tr></table></figure><p>​    </p><h3 id="Part-2-数据和寄存器"><a href="#Part-2-数据和寄存器" class="headerlink" title="Part 2: 数据和寄存器"></a>Part 2: 数据和寄存器</h3><p>####数据类型</p><p><img src="https://azeria-labs.com/wp-content/uploads/2017/03/data-types-1.png" alt="img3"></p><p>这些不同数据种类的后缀有（s表示singed，有符号，有符号的数可以是正和负的，无符号不能是负数）</p><ul><li><p>words: 没有extension</p></li><li><p>halfwords: -h , -sh</p></li><li>bytes: -b, -sb</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ldr = Load Word</span><br><span class="line">ldrh = Load unsigned Half Word</span><br><span class="line">ldrsh = Load signed Half Word</span><br><span class="line">ldrb = Load unsigned Byte</span><br><span class="line">ldrsb = Load signed Bytes</span><br><span class="line"></span><br><span class="line">str = Store Word</span><br><span class="line">strh = Store unsigned Half Word</span><br><span class="line">strsh = Store signed Half Word</span><br><span class="line">strb = Store unsigned Byte</span><br><span class="line">strsb = Store signed Byte</span><br></pre></td></tr></table></figure><p>字节顺序Endianness(端序)，分为大端（Big-Endian，BE）和小端（Little-Edian，LE)</p><p>比如Intel x86，是小端，低位放最不重要的数位。大端反之。Arm架构在ver3之前是小端，之后是Bi-Endian。</p><h4 id="ARM寄存器"><a href="#ARM寄存器" class="headerlink" title="ARM寄存器"></a>ARM寄存器</h4><p>ARM寄存器有30个通用32位寄存器（除了ARMv6-M和ARMv7-M处理器），前16个寄存器在用户层可遇到，其他的寄存器在有特殊权限的软件中可用。</p><p>前16个寄存器被命名为r0-15，被分为一般用途寄存器和特殊用途寄存器</p><table><thead><tr><th>#</th><th>Alias</th><th>Purpose</th></tr></thead><tbody><tr><td>R0</td><td>–</td><td>General purpose</td></tr><tr><td>R1</td><td>–</td><td>General purpose</td></tr><tr><td>R2</td><td>–</td><td>General purpose</td></tr><tr><td>R3</td><td>–</td><td>General purpose</td></tr><tr><td>R4</td><td>–</td><td>General purpose</td></tr><tr><td>R5</td><td>–</td><td>General purpose</td></tr><tr><td>R6</td><td>–</td><td>General purpose</td></tr><tr><td>R7</td><td>–</td><td>Holds Syscall Number</td></tr><tr><td>R8</td><td>–</td><td>General purpose</td></tr><tr><td>R9</td><td>–</td><td>General purpose</td></tr><tr><td>R10</td><td>–</td><td>General purpose</td></tr><tr><td>R11</td><td>FP</td><td>Frame Pointer</td></tr><tr><td>Special Purpose Registers</td><td></td><td></td></tr><tr><td>R12</td><td>IP</td><td>Intra Procedural Call</td></tr><tr><td>R13</td><td>SP</td><td>Stack Pointer</td></tr><tr><td>R14</td><td>LR</td><td>Link Register</td></tr><tr><td>R15</td><td>PC</td><td>Program Counter</td></tr><tr><td>CPSR</td><td>–</td><td>Current Program Status Register</td></tr></tbody></table><p>ARM registers vs Intel processors：</p><table><thead><tr><th>ARM</th><th>Description</th><th>x86</th></tr></thead><tbody><tr><td>R0</td><td>General Purpose</td><td>EAX</td></tr><tr><td>R1-R5</td><td>General Purpose</td><td>EBX, ECX, EDX, ESI, EDI</td></tr><tr><td>R6-R10</td><td>General Purpose</td><td>–</td></tr><tr><td>R11 (FP)</td><td>Frame Pointer</td><td>EBP</td></tr><tr><td>R12</td><td>Intra Procedural Call</td><td>–</td></tr><tr><td>R13 (SP)</td><td>Stack Pointer</td><td>ESP</td></tr><tr><td>R14 (LR)</td><td>Link Register</td><td>–</td></tr><tr><td>R15 (PC)</td><td>\&lt;- Program Counter / Instruction Pointer -&gt;</td><td>EIP</td></tr><tr><td>CPSR</td><td>Current Program State Register/Flags</td><td>EFLAGS</td></tr></tbody></table><p>R0-R12:  </p><p>R13: stack pointer, 指向stack的顶部。主要用于特殊函数的存储，当函数返回的时候reclaim</p><p>R14: link register</p><p>R15: Program Counter，PC会自动随着指令执行的大小增加。一般来说，ARM状态都是4 bytes 大小，THUMB模式都是2 bytes大小。当一个分支指令被执行的时候，PC保留目的地地址。在执行的时候，PC存储了现在指令的地址加上8（两条ARM指令，ARM 状态），或是现在的指令地址加4（2条Thumb指令，THUMB 状态）。在x86中，PC永远是指向下一条指令的。</p><p>注意：直接读PC的话，PC指向的是下一个指令，但是在debug的时候，PC指向的是PC现在的值加上8.</p><h4 id="CPSR："><a href="#CPSR：" class="headerlink" title="CPSR："></a>CPSR：</h4><p>用GDB来debug ARM二进制的时候，能看见一个叫flags的东西</p><p><img src="https://azeria-labs.com/wp-content/uploads/2017/03/cpsr.png" alt="img"> </p><p>Flags里面的这几个单词，指的是CPSR寄存器里面特定位数代表的值，当激活的时候会变成粗体。N, Z, C, V位和x86里面的EFLAG寄存器中 SF, ZF, CF, OF位是一样的，用于条件执行和循环等。</p><p><img src="https://github.com/Miaomiao1005/Image/raw/master/DVAR/CPSR.png" alt="image"></p><p>上图是一个32位寄存器，左边放最重要的数右边放最不重要的（也就是小端），除了GE, M和空的外，都是一个bit大小。各个位的定义：</p><table><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td>N, negative</td><td>当执行结果有负数的时候，enable</td></tr><tr><td>Z, zero</td><td>当执行结果有0值时，enable</td></tr><tr><td>C, carry</td><td>就是用来存储差值或其他，来进行下一步工作</td></tr><tr><td>V, overflow</td><td>当执行结果溢出，大于等于2的31次方或者小于负2的31次方</td></tr><tr><td>E, endian-bit</td><td>值为0表示ARM是小端，1是大端</td></tr><tr><td>T, thumb-bit</td><td>如果在thumb状态，就set，如果ARM状态，就没有</td></tr><tr><td>M, mode-bits</td><td>这些bits表达了现在的优先mode，比如USR, SVC等</td></tr><tr><td>J, jazelle</td><td>第三种执行状态，来让ARM处理器处理java字节码</td></tr></tbody></table><p>执行 cmp r1, r0 指令，也就是比较r1寄存器和r0寄存器（r1=4，r0=2）</p><p><img src="https://azeria-labs.com/wp-content/uploads/2017/03/cpsr2.png" alt="img"> </p><p>可以看见，$cpsr变成了 0x20000010, 2是carry flag，因为  cmp 4, 2就是 compare 4 against 2,4-2=2. </p><p>###Part 3: ARM指令集</p><h4 id="ARM-amp-THUMB"><a href="#ARM-amp-THUMB" class="headerlink" title="ARM &amp; THUMB"></a>ARM &amp; THUMB</h4><p>ARM处理器有两种主要的状态，ARM和Thumb。这两种状态和优先级无关，在SVC模式运行的代码可以是arm或者thumb。</p><p>这两者主要的区别在于指令集，arm状态的指令集一直是32位的，thumb是16位（也可以是32位）。在写ARM shellcode的时候，用16位thumb指令集比较好，因为不需要NULL bytes, 而用16位就能减少null bytes</p><p>thumb的种类，ARM和Thumb的区别，thumb和ARM的转换，都见网页</p><h4 id="ARM指令集简介"><a href="#ARM指令集简介" class="headerlink" title="ARM指令集简介"></a>ARM指令集简介</h4><p>模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MNEMONIC&#123;S&#125;&#123;condition&#125; &#123;Rd&#125;, Operand1, Operand2</span><br></pre></td></tr></table></figure><table><thead><tr><th>模板</th><th>用途</th></tr></thead><tbody><tr><td>MNEMONIC</td><td>指令的短名</td></tr><tr><td>{S}</td><td>suffix, 后缀，如果短名specified了，那condition flags会在操作结果之后update</td></tr><tr><td>{condition}</td><td>顾名思义</td></tr><tr><td>{Rd}</td><td>用来存储执行结果的寄存器或者destination</td></tr><tr><td>Operand1</td><td></td></tr><tr><td>Operand2</td></tr></tbody></table><p>Operand2可以有以下的形式：</p><table><thead><tr><th>Operand2</th><th></th></tr></thead><tbody><tr><td>#123</td><td>数值</td></tr><tr><td>Rx</td><td>寄存器x</td></tr><tr><td>Rx, ASR n</td><td>寄存器x的算术右位移n位(n在1和32之间)</td></tr><tr><td>Rx, LSL n</td><td>寄存器x逻辑左位移n(n在0和31之间)</td></tr><tr><td>Rx, LSR n</td><td>逻辑右位移n，n在1和32之间</td></tr><tr><td>Rx, ROR n</td><td>循环右移n，n在1和32之间，移出去的放在左侧</td></tr><tr><td>Rx, RRx</td><td>向右移动一个位置，用处理器进位标志提供一个要被移位的33位数量</td></tr></tbody></table><h5 id="逻辑位移与算术位移"><a href="#逻辑位移与算术位移" class="headerlink" title="逻辑位移与算术位移"></a>逻辑位移与算术位移</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1）算术移位 当乘数或除数是2n时，算术移位用来快速地完成对整数进行乘法或除法的运算。算数左移n位相当于乘上2n,执行方法是把原来的数中每一位都向左移动n个位置，左面移出的高位丢弃不要，右面低位空出的位置上全部补0。</span><br><span class="line">2）逻辑移位 逻辑左移n位的执行方法，是把原来的数中每一位都向左移动n个位置，左面移出的高位丢弃不要，右面低位空出的位置上全部补&quot;0&quot;。 逻辑右移n位的执行方法是把原来数中的每一位都向右移动n个位置，右面移出的低位丢弃不要，左面高位空出的位置上全部补0。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">比如一个有符号位的8位二进制数11001101，逻辑右移就不管符号位，如果移一位就变成01100110。算术右移要管符号位，右移一位变成10100110。</span><br><span class="line">逻辑左移=算数左移，右边统一添0</span><br><span class="line">逻辑右移，左边统一添0</span><br><span class="line">算数右移，左边添加的数和符号有关</span><br><span class="line">e.g:1010101010，其中[]位是添加的数字</span><br><span class="line">逻辑左移一位：010101010[0]</span><br><span class="line">算数左移一位：010101010[0]</span><br><span class="line">逻辑右移一位：[0]101010101</span><br><span class="line">算数右移一位：[1]101010101</span><br></pre></td></tr></table></figure><p>例子</p><table><thead><tr><th>命令</th><th>执行</th></tr></thead><tbody><tr><td>ADD   R0, R1, R2</td><td>把R1, R2加起来放在R0</td></tr><tr><td>ADD   R0, R1, #2</td><td>把R1, 数字2加起来放在R0</td></tr><tr><td>MOVLE R0, #5</td><td>当满足条件LE(Less than or equal)的时候，把数字5放入R0</td></tr><tr><td>MOV   R0, R1, LSL #1</td><td>把R1的数值逻辑左移一位后放入R0</td></tr></tbody></table><table><thead><tr><th>缩写</th><th>指令</th><th>缩写</th><th>指令</th></tr></thead><tbody><tr><td>MOV</td><td></td><td>EOR</td><td></td></tr><tr><td>MVN</td><td>按位取反</td><td>LDR</td><td></td></tr><tr><td>ADD</td><td></td><td>STR</td><td>store</td></tr><tr><td>SUB</td><td>减，sub a, b a=a-b</td><td>LDM</td><td></td></tr><tr><td>MUL</td><td>乘</td><td>STM</td><td></td></tr><tr><td>LSL</td><td></td><td>PUSH</td><td></td></tr><tr><td>LSR</td><td></td><td>POP</td><td></td></tr><tr><td>ASR</td><td></td><td>B</td><td></td></tr><tr><td>ROR</td><td></td><td>BL</td><td></td></tr><tr><td>CMP</td><td>compare</td><td>BX</td><td></td></tr><tr><td>AND</td><td></td><td>BLX</td><td></td></tr><tr><td>OOR</td><td></td><td>SWI/SVC</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ｍｖｎ：与mov指令用法差不多，唯一的区别是：它赋值的时候，先按位取反</span><br><span class="line"> </span><br><span class="line">ｅｇ１：</span><br><span class="line">　　　ｍｖｎ　ｒ０，０ｘａ００００００７　　　</span><br><span class="line">执行结果：ｒ０＝０ｘ５ｆｆｆｆｆｆ８</span><br><span class="line">  </span><br><span class="line">ｅｇ２：</span><br><span class="line">　　　　ｍｖｎ　ｒ０，＃４</span><br><span class="line">执行结果：ｒ０＝－５</span><br><span class="line"> </span><br><span class="line">过程分析：先对４转换成２进制（０００００１００），取反（１１１１１０１１），求其补码，因为是负数，所以先对其正数（０１１１１０１１）求反（１００００１００），然后加一（１００００１０１）＝－５</span><br><span class="line"> </span><br><span class="line">负数的补码求法：对其正数求反＋１</span><br></pre></td></tr></table></figure><p>###Part 4: Load and Store</p><p>ARM用 load and store模式，所以只有load/store（LDR STR）指令可以访问内存，而x86的大多数指令都可以直接操作内存。所以ARM的数据必须先从内存移动到寄存器里，才能使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;这篇写的是对&lt;a href=&quot;http://blog.exploitlab.net/2018/01/dvar-damn-vulnerable-arm-router.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DVAR:
      
    
    </summary>
    
      <category term="路由器" scheme="http://yoursite.com/categories/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
    
      <category term="路由器" scheme="http://yoursite.com/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
      <category term="ARM" scheme="http://yoursite.com/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo &amp; Github Pages来搭一个自己的博客~</title>
    <link href="http://yoursite.com/2018/05/25/%E7%94%A8Hexo%20&amp;%20Github%20Pages%E6%9D%A5%E6%90%AD%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/25/用Hexo &amp; Github Pages来搭一个自己的博客/</id>
    <published>2018-05-25T22:47:28.000Z</published>
    <updated>2018-07-07T22:00:20.282Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="用GitHub搭博客"><a href="#用GitHub搭博客" class="headerlink" title="用GitHub搭博客"></a>用GitHub搭博客</h1><p>按照<a href="https://kabeor.cn/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Hexo+GitPage搭建个人博客</a>一步步来，期间遇到了很多小问题~</p><p>​         </p><h2 id="1-换个git-bash的名字"><a href="#1-换个git-bash的名字" class="headerlink" title="1. 换个git bash的名字"></a>1. 换个git bash的名字</h2><p>以前装过git，用的是老的用户名和密码，这次想换成新的。问题是重装了几次之后，一打开git bash还是老的用户名和密码</p><p>在网上搜了搜，有人说在control panel - user accounts - manage windows credentials，删掉github 的credential就行了。但是，删了之后还不行，删了之后又重装了Git还是不行。难道要重启…? </p><p>重启了，但是还是老样子。</p><p>生气。</p><p>后来，觉得这两个可能是电脑的 用户名@电脑名，遂改了电脑名字和Microsoft的账户名。这次电脑名字改了，用户名还是没变。设置了一个新的本地用户Miao 123456，然后再在control panel的user account里面重新登录Microsoft的账号，这下改好啦。</p><p>还有个小问题，现在名字是Miao@Miao，为什么不是Miaomiao@Miao..？重装了git bash 还是这样… 算了。</p><h3 id="1-1-设置Git-Bash"><a href="#1-1-设置Git-Bash" class="headerlink" title="1.1 设置Git Bash"></a>1.1 设置Git Bash</h3><p>右击gitbash 的图标，选择properties，然后把–cd-to-home删掉，把start in改成我们自己设置的文件夹E:\Git Bash，重新打开后就好了</p><h2 id="2-安装Blog"><a href="#2-安装Blog" class="headerlink" title="2. 安装Blog"></a>2. 安装Blog</h2><h3 id="2-1-安装Node-js"><a href="#2-1-安装Node-js" class="headerlink" title="2.1 安装Node.js"></a>2.1 安装Node.js</h3><p>下载合适的版本，安装</p><h3 id="2-2-安装Git"><a href="#2-2-安装Git" class="headerlink" title="2.2 安装Git"></a>2.2 安装Git</h3><p>选择 Use Git from Git Bash only, Checkout Windows-style, commit Unix-style line endings</p><h3 id="2-3-安装Hexo"><a href="#2-3-安装Hexo" class="headerlink" title="2.3 安装Hexo"></a>2.3 安装Hexo</h3><p>在桌面右击选择Git Bash here，输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line"><span class="comment">#如果命令无法运行，可以尝试更换taobao的npm源</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>然后创建一个文件夹，比如E:\Blog\Hexo，在Hexo中右击选Git Bash here</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><p>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>这样，在localhost:4000里面就可以看到本地效果</p><h2 id="3-部署到Github-Pages上"><a href="#3-部署到Github-Pages上" class="headerlink" title="3. 部署到Github Pages上"></a>3. 部署到Github Pages上</h2><p>配置好SSH</p><p>在GitHub上 new repository，名字必须是username.github.io，initialize this repository with a README 打勾。</p><p>复制这个项目的地址，打开Hexo文件夹的_config.yml文件，在Deployment部分写入type: git, repository: [项目地址], branch: master。注意冒号后面有个空格，其他地方不要用空格</p><p>在Hexo文件Git Bash，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>hexo d之后，会出现一个弹框输入github的账户和密码</p><p>一步一步按照blog上的指示，安装好hexo啦</p><p>​    </p><p>终于！终于弄好了，打开了<a href="https://miaomiao1005.github.io/" target="_blank" rel="noopener">主页</a>，留下了激动的泪水</p><p>等等…</p><p>不！并没有…</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>localhost里面是很顺利的显示了主页，但是问题在于，miaomiao1005.github.io上面，还是原来的那样空白…</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>全部重装了一遍，就好了，不知道为什么…</p><ul><li>可能是因为这次文件夹名字是Blog/Hexo，而不是上次随便起的名字…？</li><li>这次也重新设置了一遍SSH</li><li>这次安装一步一步完全按照blog上写的哦</li></ul><h2 id="4-配置主题"><a href="#4-配置主题" class="headerlink" title="4. 配置主题"></a>4. 配置主题</h2><p>打开blog文件夹的themes目录，然后 git clone [想要clone的主题GitHub地址]</p><p>然后把blog文件夹里面的_config.yml文件用notepad打开，修改参数为 theme: hexo-theme-next 。注意这里，很多地方说是要改成 theme: next，我试了试，不行，只能是hexo-theme-next（估计是因为theme里面的文件夹叫hexo-theme-next而不是next吧）</p><p>回到blog文件夹，打开gitbash，输入 hexo g和hexo s，然后就可以在<a href="http://localhost:4000/看见主页了，这时主题是默认的" target="_blank" rel="noopener">http://localhost:4000/看见主页了，这时主题是默认的</a></p><p>想要换主题的话，就把blog文件夹里的themes/hexo-theme-next里面的_config.yml文件里面的主题改成Gemini</p><h3 id="问题：如何把Gemini的主题改成Dandy？"><a href="#问题：如何把Gemini的主题改成Dandy？" class="headerlink" title="问题：如何把Gemini的主题改成Dandy？"></a>问题：如何把Gemini的主题改成Dandy？</h3><p>​    </p><p>​    </p><p>​    </p><h2 id="5-发表文章"><a href="#5-发表文章" class="headerlink" title="5. 发表文章"></a>5. 发表文章</h2><p>可以在blog/Hexo文件夹里，git bash，然后hexo n “标题”，这样就可以在blog文件夹的source/_posts里面生成一个md文档</p><p>或者可以直接在这个_post文件夹里创建一个md，写完后用hexo g和hexo d推送到服务器上</p><h2 id="6-美化"><a href="#6-美化" class="headerlink" title="6. 美化"></a>6. 美化</h2><h3 id="6-1-侧边栏添加-分类，标签，关于"><a href="#6-1-侧边栏添加-分类，标签，关于" class="headerlink" title="6.1 侧边栏添加 分类，标签，关于"></a>6.1 侧边栏添加 分类，标签，关于</h3><p>在hexo站点目录（就是blog/hexo文件夹右击git bash吧）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>这样就会在/sources里面生成tags, about, categories这几个文件夹，里面有index.md文件</p><p>之后，在以后写md文件中，在文档头部填入如下格式，即可自动分类、标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章名 （无空格）</span><br><span class="line">date: 2013-05-29 07:56:29 #发表日期（无空格）</span><br><span class="line">categories:（空一格）</span><br><span class="line">- 一级类别 （无空格）</span><br><span class="line">- 二级类别（无空格）  #文章分类</span><br><span class="line">tags: [博客，文章，随笔] （无空格）     #文章标签，可以一次添加多个标签</span><br></pre></td></tr></table></figure><p>然后在themes里面的_config.yml文件里，menu，然后把tags，about，categories的#去掉</p><p>要是想显示成中文，就把Hexo文件夹里的_config.yml里面的language 设置成zh-Hans</p><p>这样，就有了很多分类</p><h3 id="6-2-头像"><a href="#6-2-头像" class="headerlink" title="6.2 头像"></a>6.2 头像</h3><p>themes文件夹，_config.yml，增加avatar字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 头像</span><br><span class="line">avatar: /images/avatar.png</span><br></pre></td></tr></table></figure><p>png文件要放在themes的source/images文件夹里</p><h3 id="6-3-作者，站点描述，链接"><a href="#6-3-作者，站点描述，链接" class="headerlink" title="6.3 作者，站点描述，链接"></a>6.3 作者，站点描述，链接</h3><p>站点配置文件，title, author和description</p><p>主题配置文件，Social，可以设置链接（注意，不仅要把github等前面的#去掉，还要把social前面的去掉）</p><p>主题配置文件，links，先把links前面的井号去掉，然后把title换成名字，后面的URL换成地址</p><h3 id="6-4-上传"><a href="#6-4-上传" class="headerlink" title="6.4 上传"></a>6.4 上传</h3><p>记得md文档要有一个头，最好用hexo n “title” 新建一个文档，这样就有头了</p><h3 id="6-5-主页改成预览"><a href="#6-5-主页改成预览" class="headerlink" title="6.5 主页改成预览"></a>6.5 主页改成预览</h3><p>主题配置文件，auto_excerpt，enable改成true</p><h3 id="6-6-背景改成动画模式"><a href="#6-6-背景改成动画模式" class="headerlink" title="6.6 背景改成动画模式"></a>6.6 背景改成动画模式</h3><p>在主题文件夹layout/_layout.swig文件里，body部分添加上如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>在主题配置文件里，添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># --------------------------------------------------------------</span><br><span class="line"># background settings</span><br><span class="line"># --------------------------------------------------------------</span><br><span class="line"># add canvas-nest effect</span><br><span class="line"># see detail from https://github.com/hustcc/canvas-nest.js</span><br><span class="line">canvas_nest: true</span><br></pre></td></tr></table></figure><p>然后 hexo clean, hexo g, hexo d</p><p>想改变线条的颜色数量就：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">color=&quot;0,0,255&quot; opacity=&apos;0.7&apos; zIndex=&quot;-2&quot; count=&quot;99&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>配置项说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">color ：线条颜色, 默认: &apos;0,0,0&apos;；三个数字分别为(R,G,B)</span><br><span class="line">opacity: 线条透明度（0~1）, 默认: 0.5</span><br><span class="line">count: 线条的总数量, 默认: 150</span><br><span class="line">zIndex: 背景的z-index属性，css属性用于控制所在层的位置, 默认: -1</span><br></pre></td></tr></table></figure><h4 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h4><p>hexo g的时候出现了YAMLException: duplicated mapping key at line 825, column 1:的问题，是因为这个主题配置文件里已经有了canvas_nest: 这个选项，再加一行就会冲突。删掉其中的一个即可</p><p>另外上面有两个canvas_nest，都要加上true哦</p><h3 id="6-7-改变新建文件的模板"><a href="#6-7-改变新建文件的模板" class="headerlink" title="6.7 改变新建文件的模板"></a>6.7 改变新建文件的模板</h3><p>Hexo/scaffolds/post.md文件，加上categories这一行</p><h2 id="7-各种小问题"><a href="#7-各种小问题" class="headerlink" title="7. 各种小问题"></a>7. 各种小问题</h2><h3 id="7-1-有的显示的是-，而不是格式"><a href="#7-1-有的显示的是-，而不是格式" class="headerlink" title="7.1 有的显示的是#，而不是格式"></a>7.1 有的显示的是#，而不是格式</h3><p>猜测1：中英文符号？</p><p>试了试，都行… _(:3 」∠)_</p><p>猜测2：似乎如果上一行已经是标题，然后回车之后再打三个井号，就不会被认为是标题…？</p><p>试了试，还是都可以呀…啊疯掉了…</p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>先打一个段落，然后右击选择三级标题.._(:3 」∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;用GitHub搭博客&quot;&gt;&lt;a href=&quot;#用GitHub搭博客&quot; class=&quot;headerlink&quot; title=&quot;用GitHub搭博客&quot;&gt;&lt;/a&gt;用GitHub搭博客&lt;/h1&gt;&lt;p&gt;按照&lt;a href=&quot;https://kabeor
      
    
    </summary>
    
      <category term="环境搭建" scheme="http://yoursite.com/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="环境搭建" scheme="http://yoursite.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Happy Life</title>
    <link href="http://yoursite.com/2008/10/07/Happy-Life/"/>
    <id>http://yoursite.com/2008/10/07/Happy-Life/</id>
    <published>2008-10-08T00:07:01.000Z</published>
    <updated>2018-07-07T22:05:24.772Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>自从看了知乎上的一个问题，<a href="https://www.zhihu.com/question/20137753" target="_blank" rel="noopener">有哪些食物为了健康你一定不吃？</a>之后，我对出去吃再也没有兴趣了呢..</p><p>嘤嘤嘤以前每周总有几次能改善下伙食，现在想想，去Mikado吧，怕生鱼片会不会不干净哦；Silk Road呢，油盐辣太多了；火锅吃腻了，而且食材的新鲜程度很可疑呢；西餐又不喜欢吃..</p><p>所以只能自己做了_(:3 」∠)_</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;自从看了知乎上的一个问题，&lt;a href=&quot;https://www.zhihu.com/question/20137753&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;有哪些食物为了健康你一定不吃？&lt;/a&gt;之后，我对出去吃再也没
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活，食物" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%EF%BC%8C%E9%A3%9F%E7%89%A9/"/>
    
  </entry>
  
</feed>
